load(
    "//bazel:rules.bzl",
    "helm_template",
    "istio_operator",
    "kustomize_build",
    "update_third_party_manifests",
)

# Mapping of third-party manifest targets to where they should be installed.
_THIRD_PARTY_MANIFESTS = {
    "//bazel/third_party:argocd_ha_manifest": "kube/platform/argocd/overlays/management/argocd.gen.yaml",
    "//bazel/third_party:argocd_non_ha_manifest": "kube/platform/argocd/overlays/local/argocd.gen.yaml",
    "//bazel/third_party:crossplane_manifest": "kube/platform/crossplane-base/base/crossplane.gen.yaml",
    "//bazel/third_party:istio_operator_manifest": "kube/platform/istio-operator/base/istio-operator.gen.yaml",
    "//bazel/third_party:kube_prometheus_manifest": "kube/platform/kube-prometheus/base/kube-prometheus.gen.yaml",
    "//bazel/third_party:prometheus_operator_crds_manifest": "kube/platform/prometheus-operator-crds/base/prometheus-operator-crds.gen.yaml",
    "//bazel/third_party:promtail": "kube/platform/promtail/base/promtail.gen.yaml",
    "//bazel/third_party:loki": "kube/platform/loki/base/loki.gen.yaml",
}

istio_operator(
    name = "istio_operator_manifest",
)

kustomize_build(
    name = "argocd_non_ha_manifest",
    srcs = ["@argocd//:all"],
    dirs = ["external/argocd/cluster-install"],
)

kustomize_build(
    name = "argocd_ha_manifest",
    srcs = ["@argocd//:all"],
    dirs = [
        "external/argocd/crds",
        "external/argocd/ha/namespace-install",
    ],
)

helm_template(
    name = "crossplane_manifest",
    srcs = ["@crossplane//:all"],
    chart_dir = "external/crossplane",
    namespace = "crossplane-system",
    release_name = "crossplane",
    values_file = "//bazel/third_party/crossplane:crossplane.values.yaml",
)

helm_template(
    name = "kube_prometheus_manifest",
    srcs = ["@kube_prometheus//:all"],
    chart_dir = "external/kube_prometheus",
    release_name = "kube-prometheus",
    values_file = "//bazel/third_party/kube_prometheus:kube-prometheus.values.yaml",
)

helm_template(
    name = "prometheus_operator_crds_manifest",
    srcs = ["@prometheus_operator_crds//:all"],
    chart_dir = "external/prometheus_operator_crds",
    release_name = "prometheus-operator-crds",
)

helm_template(
    name = "promtail",
    srcs = ["@promtail//:all"],
    chart_dir = "external/promtail",
    namespace = "promtail",
    release_name = "promtail",
    values_file = "//bazel/third_party/promtail:promtail.values.yaml",
)

helm_template(
    name = "loki",
    srcs = ["@loki//:all"],
    chart_dir = "external/loki",
    namespace = "loki",
    release_name = "loki",
    values_file = "//bazel/third_party/loki:loki.values.yaml",
)

update_third_party_manifests(
    name = "update_third_party_manifests",
    manifests = _THIRD_PARTY_MANIFESTS,
)
